# Generated by Django 3.1.1 on 2020-10-08 13:26

import datetime
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(max_length=50, null=True)),
                ('balance', models.IntegerField(default=0)),
                ('privacy', models.CharField(max_length=50, null=True)),
                ('telegram', models.CharField(max_length=50, null=True)),
                ('facebook', models.CharField(max_length=50, null=True)),
                ('twitter', models.CharField(max_length=50, null=True)),
                ('instagram', models.CharField(max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_id', models.CharField(max_length=50, unique=True)),
                ('channel_title', models.CharField(max_length=100, null=True)),
                ('numberof_videos', models.IntegerField(default=0)),
                ('numberof_subscribers', models.IntegerField(default=0)),
                ('numberof_views', models.IntegerField(default=0)),
                ('numberof_comments', models.IntegerField(default=0)),
                ('profile_url', models.URLField(max_length=128, null=True)),
                ('user', models.ManyToManyField(blank=True, related_name='user_channels', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Newssubscribers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=128)),
                ('duration', models.IntegerField(default=0)),
                ('payment_status', models.CharField(max_length=50, null=True)),
                ('channelid', models.CharField(max_length=150, null=True)),
                ('watchtime', models.IntegerField(default=0)),
                ('current_watchedtime', models.IntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('price_pay', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('price_all', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('total_price', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('service_fee', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('currency', models.CharField(max_length=50, null=True)),
                ('vid_id', models.CharField(max_length=50, unique=True)),
                ('vid_title', models.CharField(max_length=500)),
                ('channel', models.ManyToManyField(blank=True, related_name='channel_videos', to='accounts.Channel')),
                ('user', models.ManyToManyField(blank=True, related_name='user_videos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Testimony',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Testimony', models.CharField(max_length=500)),
                ('profile_url', models.CharField(max_length=310, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_testimonies', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50)),
                ('user_id', models.CharField(max_length=50)),
                ('state', models.BooleanField(default=False)),
                ('account_email', models.EmailField(default=0, max_length=254)),
                ('email', models.EmailField(default=0, max_length=254)),
                ('code', models.CharField(max_length=50)),
                ('currency', models.CharField(max_length=50, null=True)),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('created', models.DateTimeField(blank=True, default=datetime.datetime.now, editable=False)),
                ('modified', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('user', models.ManyToManyField(blank=True, related_name='user_payments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=500)),
                ('state', models.CharField(max_length=500)),
                ('receiver', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Newsletters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=500)),
                ('message', models.CharField(max_length=3100, null=True)),
                ('send_it', models.BooleanField(default=False)),
                ('newssubscribers', models.ManyToManyField(to='accounts.Newssubscribers')),
            ],
        ),
    ]
